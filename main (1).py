# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UO-1Sp6jPVUvSXI4eAEpPFGQw1tE2oCd
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import accuracy_score



"""Data Collection & Analaysis


"""

#loading the data from csv file to a pandas dataframe
parkinsons_data = pd.read_csv("/content/parkinsons.csv")

#printing the first five rows of the data frame
parkinsons_data.head()

#number of rows and columns in the dataframe
parkinsons_data.shape

#even more info about the dataset
parkinsons_data.info()

#checking missing values in every column
parkinsons_data.isnull().sum()

# getting some statistical measures about the dataset
parkinsons_data.describe()

# distribution of target variable (Status becasue 0=healthy and 1 = parkinsons)
parkinsons_data['status'].value_counts()

# grouping the data based on target variable (status column)
parkinsons_data.groupby('status').mean()

"""since there is clear distinction between the two people or model will compare the value as higher mean= more likely healthy

DATA PREPROCESSING
"""

#Seprating features and target column(status)
X = parkinsons_data.drop(columns = ['name','status'],axis = 1) #when dropping row axis =0 when dropping column axis = 1
Y = parkinsons_data['status']
print(Y)

#Splitting the data to training and test data
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2 , random_state = 2) #x_train = sab value ligera train garaucha value lai y train ma haldincha
                                                                                           #x_test = sab value lai testing wala ma halcha ani correspoing value y_test ma haldincha
                                                                                           #0.2 = 20% of total data will be test data and 80% train data

print(X.shape,X_train.shape,X_test.shape) #testing if the data was correctly splitted

"""DATA STANDARDIZATION

"""

scaler = StandardScaler() #object

scaler.fit(X_train) #it fitted the data to a common range

X_train = scaler.transform(X_train) # convert the data to a similar range 0 to -1

X_test = scaler.transform(X_test)

print(X_train)

"""MODEL TRAINING
(SUPPORT VECTOR MACHINE MODEL)


"""

'''This model draws a hyperplane between the two closest datas provided which seprates it according to the necessary features
   If the closest datas change the hyperplane also changes
   Closest data points are also called support vectors
   The more features the more dimensions
   classifier will give u classes , regression will give particular value'''

model = svm.SVC(kernel = 'linear')

#training with traininng data
model.fit(X_train, Y_train) #plotting the data in x and y axis

"""EVALUATION


"""

#Accuracy on traning data
X_train_prediction = model.predict(X_train)
training_accuracy = accuracy_score(Y_train , X_train_prediction) #comparing the real value with the one our machine generated

print(training_accuracy)  #88% accuracy score

#Accuracy on test data
X_test_prediction = model.predict(X_test)
test_accuracy = accuracy_score(Y_test , X_test_prediction) #comparing the real value with the one our machine generated

print(test_accuracy) #87% accuracy (due to less available time)

"""BUILDING A PREDICTIVE SYSTEM

"""

input_data = (214.28900,260.27700,77.97300,0.00567,0.00003,0.00295,0.00317,0.00885,0.01884,0.19000,0.01026,0.01161,0.01373,0.03078,0.04398,21.20900,0.462803,0.664357,-5.724056,0.190667,2.555477,0.148569)

#changing input_data to numpy
input_data_num = np.asarray(input_data)

#reshaping the array
input_data_reshaped = input_data_num.reshape(1,-1) # 1,-1 means we are just predicting 1 data point value

#standarizing the input data
standard_data = scaler.transform(input_data_reshaped)

#predicting
prediction = model.predict(standard_data)
print(prediction)


if (prediction[0] == 0):
  print("The Person doesnt have Parkinsons Disease")

else:
  print("The Person has Parkinsons Disease")